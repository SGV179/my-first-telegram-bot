from database.connections import create_tables, get_db
from database.models import User, ChannelSubscription, UserEvent, UserScore
from config.settings import settings
from datetime import datetime
import json

def test_detailed_tracking():
    """–î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    
    create_tables()
    print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞\n")
    
    db = next(get_db())
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    users = db.query(User).all()
    print(f"üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ: {len(users)}")
    
    for user in users:
        print(f"\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å #{user.id}:")
        print(f"   Telegram ID: {user.telegram_id}")
        print(f"   –ò–º—è: {user.first_name}")
        print(f"   Username: @{user.username}")
        print(f"   –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user.registration_date}")
        
        # –ü–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        subscriptions = db.query(ChannelSubscription).filter(
            ChannelSubscription.user_id == user.id
        ).all()
        
        print(f"   üìù –ü–æ–¥–ø–∏—Å–æ–∫: {len(subscriptions)}")
        for sub in subscriptions:
            channel_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–Ω–∞–ª"
            for name, channel_id in settings.CHANNELS.items():
                if channel_id == sub.channel_id:
                    channel_name = name
                    break
            
            status = "‚úÖ –ø–æ–¥–ø–∏—Å–∞–Ω" if sub.is_subscribed else "‚ùå –æ—Ç–ø–∏—Å–∞–Ω"
            print(f"      ‚Ä¢ {channel_name} ({sub.channel_id}): {status}")
            print(f"        –î–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏: {sub.subscribed_at}")
        
        # –ë–∞–ª–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_score = db.query(UserScore).filter(UserScore.user_id == user.id).first()
        score = user_score.total_score if user_score else 0
        print(f"   ‚≠ê –ë–∞–ª–ª—ã: {score}")
        
        # –°–æ–±—ã—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        events = db.query(UserEvent).filter(UserEvent.user_id == user.id).all()
        print(f"   üéØ –°–æ–±—ã—Ç–∏–π: {len(events)}")
        
        for event in events[-3:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Å–æ–±—ã—Ç–∏—è
            channel_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–Ω–∞–ª"
            for name, channel_id in settings.CHANNELS.items():
                if channel_id == event.channel_id:
                    channel_name = name
                    break
            
            print(f"      ‚Ä¢ {event.event_type} –≤ {channel_name}")
            print(f"        –í—Ä–µ–º—è: {event.created_at}")
            if event.event_data:
                print(f"        –î–∞–Ω–Ω—ã–µ: {json.dumps(event.event_data, ensure_ascii=False)}")

def check_recent_activity():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ—Å–ª–µ–¥–Ω—é—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"""
    db = next(get_db())
    
    print(f"\nüìà –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:")
    
    # –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
    recent_events = db.query(UserEvent).order_by(UserEvent.created_at.desc()).limit(5).all()
    
    if recent_events:
        print("–ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–æ–±—ã—Ç–∏–π:")
        for event in recent_events:
            user = db.query(User).filter(User.id == event.user_id).first()
            user_name = f"{user.first_name} (@{user.username})" if user else f"ID: {event.user_id}"
            
            channel_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–Ω–∞–ª"
            for name, channel_id in settings.CHANNELS.items():
                if channel_id == event.channel_id:
                    channel_name = name
                    break
            
            print(f"  ‚Ä¢ {user_name}: {event.event_type} –≤ {channel_name}")
            print(f"    –í—Ä–µ–º—è: {event.created_at}")
    else:
        print("  –ù–µ—Ç —Å–æ–±—ã—Ç–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è")

if __name__ == "__main__":
    print("=== –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è ===\n")
    test_detailed_tracking()
    check_recent_activity()
