import logging
from app.database.db_connection import db
from app.utils.logger import logger

def add_sample_rewards():
    """Add sample rewards to database"""
    try:
        conn = db.get_connection()
        cursor = conn.cursor()
        
        # Check if rewards already exist
        cursor.execute("SELECT COUNT(*) FROM rewards WHERE is_active = TRUE")
        count = cursor.fetchone()[0]
        
        if count > 0:
            logger.info("‚úÖ Sample rewards already exist")
            return
        
        # Add sample rewards with placeholder file IDs (will be replaced with actual files)
        sample_rewards = [
            {
                'title': 'üìö –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –∫–Ω–∏–≥–∞ "–û—Å–Ω–æ–≤—ã –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"',
                'description': '–ü–æ–¥—Ä–æ–±–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤ —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏',
                'cost_points': 50,
                'pdf_file_id': 'sample_investment_guide'
            },
            {
                'title': 'üéì –í–∏–¥–µ–æ-–∫—É—Ä—Å "–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç—å"',
                'description': '5 —É—Ä–æ–∫–æ–≤ –ø–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ª–∏—á–Ω—ã–º–∏ —Ñ–∏–Ω–∞–Ω—Å–∞–º–∏ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é –±—é–¥–∂–µ—Ç–∞',
                'cost_points': 100,
                'pdf_file_id': 'sample_financial_course'
            },
            {
                'title': 'üìä –®–∞–±–ª–æ–Ω Excel –¥–ª—è —É—á–µ—Ç–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤',
                'description': '–£–¥–æ–±–Ω—ã–π —à–∞–±–ª–æ–Ω –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ –æ—Ç—á–µ—Ç–∞–º–∏',
                'cost_points': 30,
                'pdf_file_id': 'sample_excel_template'
            },
            {
                'title': 'üíº –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å —ç–∫—Å–ø–µ—Ä—Ç–æ–º',
                'description': '30-–º–∏–Ω—É—Ç–Ω–∞—è –æ–Ω–ª–∞–π–Ω-–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π –∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è',
                'cost_points': 200,
                'pdf_file_id': None  # This reward doesn't have a PDF
            },
            {
                'title': 'üìà –î–æ—Å—Ç—É–ø –∫ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–º –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º',
                'description': '–ó–∞–∫—Ä—ã—Ç—ã–µ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç—á–µ—Ç—ã –∏ –ø—Ä–æ–≥–Ω–æ–∑—ã —Ä—ã–Ω–∫–∞',
                'cost_points': 150,
                'pdf_file_id': 'sample_exclusive_reports'
            }
        ]
        
        for reward in sample_rewards:
            cursor.execute("""
                INSERT INTO rewards (title, description, cost_points, pdf_file_id)
                VALUES (%s, %s, %s, %s)
            """, (reward['title'], reward['description'], reward['cost_points'], reward['pdf_file_id']))
        
        conn.commit()
        cursor.close()
        
        logger.info("‚úÖ Sample rewards with PDF files added successfully")
        
    except Exception as e:
        logger.error(f"‚ùå Error adding sample rewards: {e}")

if __name__ == "__main__":
    add_sample_rewards()
