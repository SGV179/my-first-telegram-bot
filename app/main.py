import asyncio
import logging
from aiogram import Bot, Dispatcher
from aiogram.filters import CommandStart
from aiogram.types import Message

from app.config.config import config
from app.database.db_connection import db
from app.models.database_models import init_database
from app.services.user_service import UserService
from app.services.points_service import PointsService
from app.services.channel_service import ChannelService
from app.handlers.user_handlers import router as user_router
from app.utils.logger import logger

async def main():
    # Initialize bot and dispatcher
    bot = Bot(token=config.BOT_TOKEN)
    dp = Dispatcher()

    try:
        # Test database connection and initialize tables
        conn = db.get_connection()
        cursor = conn.cursor()
        cursor.execute("SELECT version();")
        db_version = cursor.fetchone()
        logger.info(f"‚úÖ Database version: {db_version[0]}")
        cursor.close()

        # Initialize database tables
        init_database()
        logger.info("‚úÖ Database tables initialized")

        # Test bot connection
        bot_info = await bot.get_me()
        logger.info(f"‚úÖ Bot started successfully: @{bot_info.username}")

        # Register handlers
        dp.message.register(start_handler, CommandStart())
        dp.include_router(user_router)

        # Start polling
        logger.info("üöÄ Bot is starting...")
        await dp.start_polling(bot)

    except Exception as e:
        logger.error(f"‚ùå Error starting bot: {e}")
    finally:
        await bot.session.close()
        db.close()

async def start_handler(message: Message):
    """Handle /start command"""
    try:
        user = message.from_user
        logger.info(f"üë§ User {user.id} started the bot")

        # Create or update user in database
        user_data = UserService.create_or_update_user(
            telegram_id=user.id,
            username=user.username,
            first_name=user.first_name,
            last_name=user.last_name
        )

        if user_data:
            # Update bot subscription status
            UserService.update_subscription_status(
                telegram_id=user.id,
                bot_subscribed=True
            )

            # Check channel subscriptions
            subscription_result = await ChannelService.check_user_subscription(message.bot, user.id)
            
            welcome_text = f"""
üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name}!

ü§ñ –Ø - –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞–º–∏ –∏ —Å–∏—Å—Ç–µ–º–æ–π –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏.

üìä –í–∞—à–∏ –±–∞–ª–ª—ã: {PointsService.get_user_points(user.id)}

üì∫ –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏:
{config.CHANNEL_1}: {'‚úÖ' if subscription_result['channel_1'] else '‚ùå'}
{config.CHANNEL_2}: {'‚úÖ' if subscription_result['channel_2'] else '‚ùå'}

üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:
/points - –≤–∞—à–∏ –±–∞–ª–ª—ã
/profile - –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å
/check_subscription - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É
/rewards - –¥–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã
/help - —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º
            """

            if subscription_result['welcome_points'] > 0:
                welcome_text += f"\nüéâ –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {subscription_result['welcome_points']} –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö –±–∞–ª–ª–æ–≤!"
            elif not subscription_result['subscribed']:
                welcome_text += f"\n\nüìã –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö –±–∞–ª–ª–æ–≤ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –æ–±–∞ –∫–∞–Ω–∞–ª–∞ –≤—ã—à–µ!"

            await message.answer(welcome_text)
        else:
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    except Exception as e:
        logger.error(f"‚ùå Error in start handler: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

if __name__ == "__main__":
    asyncio.run(main())
