import logging
from aiogram import Bot
from app.config.config import config
from app.services.user_service import UserService
from app.services.points_service import PointsService

logger = logging.getLogger(__name__)

class ChannelService:
    @staticmethod
    async def check_user_subscription(bot: Bot, user_id: int):
        """Check if user is subscribed to both channels"""
        try:
            # Check subscription to channel 1
            member1 = await bot.get_chat_member(config.CHANNEL_1_ID, user_id)
            subscribed_1 = member1.status in ['member', 'administrator', 'creator']
            
            # Check subscription to channel 2
            member2 = await bot.get_chat_member(config.CHANNEL_2_ID, user_id)
            subscribed_2 = member2.status in ['member', 'administrator', 'creator']
            
            # Update user subscription status
            UserService.update_subscription_status(
                telegram_id=user_id,
                channel_1=subscribed_1,
                channel_2=subscribed_2
            )
            
            # Give welcome points if eligible
            if subscribed_1 and subscribed_2:
                welcome_points = UserService.give_welcome_points(user_id)
                if welcome_points > 0:
                    return {
                        'subscribed': True,
                        'channel_1': subscribed_1,
                        'channel_2': subscribed_2,
                        'welcome_points': welcome_points
                    }
            
            return {
                'subscribed': subscribed_1 and subscribed_2,
                'channel_1': subscribed_1,
                'channel_2': subscribed_2,
                'welcome_points': 0
            }
            
        except Exception as e:
            logger.error(f"‚ùå Error checking subscription for user {user_id}: {e}")
            return {
                'subscribed': False,
                'channel_1': False,
                'channel_2': False,
                'welcome_points': 0
            }

    @staticmethod
    async def require_subscription(bot: Bot, user_id: int, message_text: str = None):
        """Check subscription and return appropriate message"""
        subscription = await ChannelService.check_user_subscription(bot, user_id)
        
        if not subscription['subscribed']:
            if message_text:
                return f"""
{message_text}

üìã –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –æ–±–∞ –∫–∞–Ω–∞–ª–∞:

{config.CHANNEL_1}
{config.CHANNEL_2}

‚úÖ –ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
                """
            else:
                return f"""
‚ùå –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –æ–±–∞ –∫–∞–Ω–∞–ª–∞:

{config.CHANNEL_1}
{config.CHANNEL_2}

‚úÖ –ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
                """
        
        # If subscribed and got welcome points
        if subscription['welcome_points'] > 0:
            return f"""
‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –æ–±–∞ –∫–∞–Ω–∞–ª–∞!

üéâ –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {subscription['welcome_points']} –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö –±–∞–ª–ª–æ–≤!

üí∞ –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –±–∞–ª–ª—ã –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å.
            """
        
        # If already subscribed
        return "‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –æ–±–∞ –∫–∞–Ω–∞–ª–∞! –ú–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞."
