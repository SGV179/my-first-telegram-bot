import logging
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message

from app.services.activity_service import ActivityService
from app.services.points_service import PointsService
from app.services.admin_service import AdminService

logger = logging.getLogger(__name__)

router = Router()

@router.message(Command("activities"))
async def activities_handler(message: Message):
    """Show user activity history"""
    try:
        user_id = message.from_user.id
        activities = ActivityService.get_user_activities(user_id, limit=10)
        
        if not activities:
            await message.answer("üìä –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π.")
            return
        
        activities_text = "üìä –ò—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π:\n\n"
        
        for i, activity in enumerate(activities, 1):
            activity_type, points_earned, channel_id, created_at = activity
            
            # Translate activity types to Russian
            activity_names = {
                'like': '‚ù§Ô∏è –õ–∞–π–∫',
                'comment': 'üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π', 
                'repost': 'üîÑ –†–µ–ø–æ—Å—Ç',
                'button_click': 'üîò –ù–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏',
                'welcome_bonus': 'üéâ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ –±–∞–ª–ª—ã',
                'admin_bonus': 'üõ†Ô∏è –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞'
            }
            
            activity_name = activity_names.get(activity_type, activity_type)
            
            activities_text += f"{i}. {activity_name}\n"
            activities_text += f"   üí∞ +{points_earned} –±–∞–ª–ª–æ–≤\n"
            activities_text += f"   üìÖ {created_at.strftime('%d.%m.%Y %H:%M')}\n"
            activities_text += "   ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
        
        total_points = PointsService.get_user_points(user_id)
        activities_text += f"\nüí∞ –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {total_points} –±–∞–ª–ª–æ–≤"
        
        await message.answer(activities_text)
        
    except Exception as e:
        logger.error(f"‚ùå Error in activities handler: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π")

@router.message(Command("activity_stats"))
async def activity_stats_handler(message: Message):
    """Show activity statistics (admin only)"""
    try:
        if not AdminService.is_admin(message.from_user.id):
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
            
        stats = ActivityService.get_activities_stats(days=7)
        top_users = ActivityService.get_top_active_users(limit=5, days=7)
        
        if not stats:
            await message.answer("üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—è—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π.")
            return
        
        stats_text = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π (7 –¥–Ω–µ–π):\n\n"
        
        total_activities = 0
        total_points = 0
        
        for stat in stats:
            activity_type, count, points = stat
            
            activity_names = {
                'like': '‚ù§Ô∏è –õ–∞–π–∫–∏',
                'comment': 'üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏',
                'repost': 'üîÑ –†–µ–ø–æ—Å—Ç—ã', 
                'button_click': 'üîò –ù–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫',
                'welcome_bonus': 'üéâ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ',
                'admin_bonus': 'üõ†Ô∏è –ê–¥–º–∏–Ω –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è'
            }
            
            activity_name = activity_names.get(activity_type, activity_type)
            stats_text += f"{activity_name}: {count} (+{points} –±–∞–ª–ª–æ–≤)\n"
            
            total_activities += count
            total_points += points
        
        stats_text += f"\nüìà –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π: {total_activities}"
        stats_text += f"\nüí∞ –í—Å–µ–≥–æ –±–∞–ª–ª–æ–≤: {total_points}"
        
        if top_users:
            stats_text += "\n\nüèÜ –°–∞–º—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n"
            for i, user in enumerate(top_users, 1):
                user_id, username, first_name, activity_count, user_points = user
                stats_text += f"{i}. {first_name} (@{username or '–Ω–µ—Ç'}): {activity_count} –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π (+{user_points} –±–∞–ª–ª–æ–≤)\n"
        
        await message.answer(stats_text)
        
    except Exception as e:
        logger.error(f"‚ùå Error in activity_stats handler: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π")

@router.message(Command("test_activity"))
async def test_activity_handler(message: Message):
    """Test activity tracking (for demonstration)"""
    try:
        user_id = message.from_user.id
        
        # Test different activity types
        test_activities = [
            ('like', '–¢–µ—Å—Ç–æ–≤—ã–π –ª–∞–π–∫'),
            ('comment', '–¢–µ—Å—Ç–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π'),
            ('repost', '–¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–ø–æ—Å—Ç'),
            ('button_click', '–¢–µ—Å—Ç–æ–≤–æ–µ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏')
        ]
        
        results = []
        for activity_type, description in test_activities:
            success = ActivityService.track_activity(
                user_id, 
                activity_type, 
                description=description
            )
            if success:
                results.append(f"‚úÖ {description}")
            else:
                results.append(f"‚ùå {description}")
        
        response_text = "üß™ –¢–µ—Å—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π:\n\n" + "\n".join(results)
        response_text += f"\n\nüìä –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: /activities"
        
        await message.answer(response_text)
        
    except Exception as e:
        logger.error(f"‚ùå Error in test_activity handler: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π")
