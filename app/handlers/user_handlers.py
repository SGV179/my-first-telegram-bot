import logging
from app.services.channel_service import ChannelService
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message

from app.services.user_service import UserService
from app.services.points_service import PointsService

logger = logging.getLogger(__name__)

router = Router()

@router.message(Command("points"))
async def points_handler(message: Message):
    """Show user points"""
    try:
        user_id = message.from_user.id
        points = PointsService.get_user_points(user_id)
        
        await message.answer(f"üí∞ –í–∞—à–∏ –±–∞–ª–ª—ã: {points}")
        
    except Exception as e:
        logger.error(f"‚ùå Error in points handler: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–ª–æ–≤")

@router.message(Command("profile"))
async def profile_handler(message: Message):
    """Show user profile"""
    try:
        user_id = message.from_user.id
        user = UserService.get_user(user_id)
        
        if user:
            subscriptions = UserService.check_user_subscriptions(user_id)
            
            profile_text = f"""
üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:

üÜî ID: {user[1]}
üë§ –ò–º—è: {user[3]} {user[4] or ''}
üìõ Username: @{user[2] or '–Ω–µ —É–∫–∞–∑–∞–Ω'}
üé≠ –†–æ–ª—å: {user[5]}
üí∞ –ë–∞–ª–ª—ã: {user[6]}

üìä –ü–æ–¥–ø–∏—Å–∫–∏:
ü§ñ –ë–æ—Ç: {'‚úÖ' if subscriptions and subscriptions['bot'] else '‚ùå'}
üì∫ {user[12]}: {'‚úÖ' if subscriptions and subscriptions['channel_1'] else '‚ùå'}
üì∫ {user[13]}: {'‚úÖ' if subscriptions and subscriptions['channel_2'] else '‚ùå'}
            """
            
            await message.answer(profile_text)
        else:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
    except Exception as e:
        logger.error(f"‚ùå Error in profile handler: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è")

@router.message(Command("help"))
async def help_handler(message: Message):
    """Show help message"""
    help_text = """
ü§ñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/points - –ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—à–∏ –±–∞–ª–ª—ã
/profile - –ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å
/check_subscription - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª—ã
/rewards - –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

üí° –°–∏—Å—Ç–µ–º–∞ –±–∞–ª–ª–æ–≤:
‚Ä¢ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –æ–±–∞ –∫–∞–Ω–∞–ª–∞: 30 –±–∞–ª–ª–æ–≤
‚Ä¢ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: 5 –±–∞–ª–ª–æ–≤
‚Ä¢ –†–µ–ø–æ—Å—Ç: 3 –±–∞–ª–ª–∞
‚Ä¢ –õ–∞–π–∫: 1 –±–∞–ª–ª
‚Ä¢ –ù–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏: 10 –±–∞–ª–ª–æ–≤
‚Ä¢ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥—Ä—É–≥–∞: 50 –±–∞–ª–ª–æ–≤

üéÅ –ù–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –±–∞–ª–ª—ã –º–æ–∂–Ω–æ –æ–±–º–µ–Ω—è—Ç—å –Ω–∞ –Ω–∞–≥—Ä–∞–¥—ã!
    """
    
    await message.answer(help_text)

@router.message(Command("check_subscription"))
async def check_subscription_handler(message: Message):
    """Check user subscription status"""
    try:
        user_id = message.from_user.id
        result = await ChannelService.require_subscription(message.bot, user_id)
        
        await message.answer(result)
        
    except Exception as e:
        logger.error(f"‚ùå Error in check_subscription handler: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏")
