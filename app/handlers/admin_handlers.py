import logging
from aiogram import Router, F
from aiogram.filters import Command, CommandObject
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from app.services.admin_service import AdminService
from app.services.user_service import UserService
from app.services.points_service import PointsService
from app.services.rewards_service import RewardsService

logger = logging.getLogger(__name__)

router = Router()

class AdminStates(StatesGroup):
    waiting_for_user_id = State()
    waiting_for_points_amount = State()
    waiting_for_points_reason = State()

# –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∞ –≤ –∫–∞–∂–¥–æ–º —Ö–µ–Ω–¥–ª–µ—Ä–µ
async def check_admin(user_id: int) -> bool:
    return AdminService.is_admin(user_id)

@router.message(Command("admin"))
async def admin_panel_handler(message: Message):
    """Show admin panel"""
    if not await check_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
        
    try:
        # Get statistics
        user_stats = AdminService.get_user_stats()
        system_stats = AdminService.get_system_stats()
        
        admin_text = """
üõ†Ô∏è –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:
‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_users}
‚Ä¢ –ü–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –±–æ—Ç–∞: {bot_subscribers}
‚Ä¢ –ü–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –æ–±–∞ –∫–∞–Ω–∞–ª–∞: {channel_subscribers}
‚Ä¢ –í—Å–µ–≥–æ –±–∞–ª–ª–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ: {total_points}

üéÅ –ù–∞–≥—Ä–∞–¥—ã:
‚Ä¢ –í—Å–µ–≥–æ –Ω–∞–≥—Ä–∞–¥: {total_rewards}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_rewards}
‚Ä¢ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {total_cost} –±–∞–ª–ª–æ–≤

üìä –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:
‚Ä¢ –í—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {total_transactions}
‚Ä¢ –û–±—â–µ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –±–∞–ª–ª–æ–≤: {total_points_movement}

‚ö° –ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:
/admin_users - –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
/admin_user <id> - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
/admin_add_points - –ù–∞—á–∏—Å–ª–∏—Ç—å –±–∞–ª–ª—ã
/admin_stats - –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        """.format(
            total_users=user_stats['total_users'],
            active_users=user_stats['active_users'],
            bot_subscribers=user_stats['bot_subscribers'],
            channel_subscribers=user_stats['channel_subscribers'],
            total_points=user_stats['total_points'],
            total_rewards=system_stats['rewards']['total'],
            active_rewards=system_stats['rewards']['active'],
            total_cost=system_stats['rewards']['total_cost'],
            total_transactions=system_stats['transactions']['total'],
            total_points_movement=system_stats['transactions']['total_points']
        )
        
        await message.answer(admin_text)
        
    except Exception as e:
        logger.error(f"‚ùå Error in admin panel handler: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")

@router.message(Command("admin_stats"))
async def admin_stats_handler(message: Message):
    """Show detailed statistics"""
    if not await check_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
        
    try:
        user_stats = AdminService.get_user_stats()
        system_stats = AdminService.get_system_stats()
        
        stats_text = """
üìà –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:
‚Ä¢ –í—Å–µ–≥–æ: {total_users}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_users}
‚Ä¢ –ü–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –±–æ—Ç–∞: {bot_subscribers}
‚Ä¢ –ü–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –æ–±–∞ –∫–∞–Ω–∞–ª–∞: {channel_subscribers}
‚Ä¢ –í—Å–µ–≥–æ –±–∞–ª–ª–æ–≤: {total_points}

üéÅ –ù–∞–≥—Ä–∞–¥—ã:
‚Ä¢ –í—Å–µ–≥–æ: {total_rewards}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_rewards}
‚Ä¢ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {total_cost}

üìä –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:
‚Ä¢ –í—Å–µ–≥–æ: {total_transactions}
‚Ä¢ –î–≤–∏–∂–µ–Ω–∏–µ –±–∞–ª–ª–æ–≤: {total_points_movement}

üìÖ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ 7 –¥–Ω–µ–π:
{recent_activities}
        """.format(
            total_users=user_stats['total_users'],
            active_users=user_stats['active_users'],
            bot_subscribers=user_stats['bot_subscribers'],
            channel_subscribers=user_stats['channel_subscribers'],
            total_points=user_stats['total_points'],
            total_rewards=system_stats['rewards']['total'],
            active_rewards=system_stats['rewards']['active'],
            total_cost=system_stats['rewards']['total_cost'],
            total_transactions=system_stats['transactions']['total'],
            total_points_movement=system_stats['transactions']['total_points'],
            recent_activities="\n".join([f"‚Ä¢ {activity}: {count}" for activity, count in system_stats['recent_activities'].items()]) if system_stats['recent_activities'] else "‚Ä¢ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—è—Ö"
        )
        
        await message.answer(stats_text)
        
    except Exception as e:
        logger.error(f"‚ùå Error in admin stats handler: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

@router.message(Command("admin_users"))
async def admin_users_handler(message: Message, command: CommandObject = None):
    """Show users list"""
    if not await check_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
        
    try:
        page = 1
        if command and command.args:
            try:
                page = int(command.args)
            except ValueError:
                await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã.")
                return
        
        limit = 10
        offset = (page - 1) * limit
        
        users = AdminService.get_all_users(limit=limit, offset=offset)
        total_users = AdminService.get_users_count()
        total_pages = (total_users + limit - 1) // limit
        
        if not users:
            await message.answer("üì≠ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return
        
        users_text = f"üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{total_pages})\n\n"
        
        for i, user in enumerate(users, offset + 1):
            telegram_id, username, first_name, last_name, role, points, is_active, bot_sub, ch1_sub, ch2_sub, created_at = user
            
            users_text += f"{i}. [{telegram_id}] {first_name} {last_name or ''}\n"
            users_text += f"   @{username or '–Ω–µ—Ç'}\n"
            users_text += f"   –†–æ–ª—å: {role} | –ë–∞–ª–ª—ã: {points}\n"
            users_text += f"   –ë–æ—Ç:{'‚úÖ' if bot_sub else '‚ùå'} –ö–∞–Ω–∞–ª1:{'‚úÖ' if ch1_sub else '‚ùå'} –ö–∞–Ω–∞–ª2:{'‚úÖ' if ch2_sub else '‚ùå'}\n"
            users_text += f"   –î–∞—Ç–∞: {created_at.strftime('%d.%m.%Y')}\n"
            users_text += "   ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
        
        users_text += f"\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /admin_users <–Ω–æ–º–µ—Ä_—Å—Ç—Ä–∞–Ω–∏—Ü—ã>"
        
        await message.answer(users_text)
        
    except Exception as e:
        logger.error(f"‚ùå Error in admin users handler: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

@router.message(Command("admin_user"))
async def admin_user_handler(message: Message, command: CommandObject = None):
    """Show user details"""
    if not await check_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
        
    try:
        if not command or not command.args:
            await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: /admin_user <user_id>")
            return
        
        try:
            user_id = int(command.args)
        except ValueError:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            return
        
        user = UserService.get_user(user_id)
        
        if not user:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        (db_id, telegram_id, username, first_name, last_name, 
         role, points, referral_code, referred_by, is_active,
         bot_sub, ch1_sub, ch2_sub, welcome_given, created_at) = user
        
        # Get user transactions
        transactions = PointsService.get_user_transactions(user_id, limit=5)
        
        user_text = f"""
üë§ *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ*

üÜî ID: {telegram_id}
üë§ –ò–º—è: {first_name} {last_name or ''}
üìõ Username: @{username or '–Ω–µ—Ç'}
üé≠ –†–æ–ª—å: {role}
üí∞ –ë–∞–ª–ª—ã: {points}
üîó –†–µ—Ñ. –∫–æ–¥: {referral_code or '–Ω–µ—Ç'}
üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω: {f'–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {referred_by}' if referred_by else '–Ω–µ—Ç'}

üìä *–°—Ç–∞—Ç—É—Å—ã:*
‚Ä¢ –ê–∫—Ç–∏–≤–µ–Ω: {'‚úÖ' if is_active else '‚ùå'}
‚Ä¢ –ü–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –±–æ—Ç–∞: {'‚úÖ' if bot_sub else '‚ùå'}
‚Ä¢ –ö–∞–Ω–∞–ª 1: {'‚úÖ' if ch1_sub else '‚ùå'}
‚Ä¢ –ö–∞–Ω–∞–ª 2: {'‚úÖ' if ch2_sub else '‚ùå'}
‚Ä¢ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ –±–∞–ª–ª—ã: {'‚úÖ' if welcome_given else '‚ùå'}

üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {created_at.strftime('%d.%m.%Y %H:%M')}

üí≥ *–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:*
"""
        
        if transactions:
            for trans in transactions:
                trans_type, points_change, description, trans_date = trans
                sign = "+" if points_change > 0 else ""
                user_text += f"‚Ä¢ {trans_date.strftime('%d.%m %H:%M')}: {sign}{points_change} - {trans_type}\n"
        else:
            user_text += "‚Ä¢ –ù–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π\n"
        
        user_text += f"\n‚ö° –ö–æ–º–∞–Ω–¥—ã:\n/add_points_{user_id} - –ù–∞—á–∏—Å–ª–∏—Ç—å –±–∞–ª–ª—ã"
        
        await message.answer(user_text, parse_mode="Markdown")
        
    except Exception as e:
        logger.error(f"‚ùå Error in admin user handler: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ")

@router.message(F.text.startswith('/add_points_'))
async def quick_add_points_handler(message: Message):
    """Quick add points using command format /add_points_123_50"""
    if not await check_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
        
    try:
        command_parts = message.text.split('_')
        
        if len(command_parts) < 3:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /add_points_<user_id>_<points>")
            return
        
        try:
            user_id = int(command_parts[2])
            points = int(command_parts[3]) if len(command_parts) > 3 else 0
        except (ValueError, IndexError):
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–µ–ª. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /add_points_<user_id>_<points>")
            return
        
        if points <= 0:
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤.")
            return
        
        # Add points to user
        success, result = AdminService.add_points_to_user(user_id, points, "–ë—ã—Å—Ç—Ä–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É")
        
        if success:
            user = UserService.get_user(user_id)
            user_name = f"{user[3]} {user[4] or ''}" if user else f"ID {user_id}"
            await message.answer(f"‚úÖ –ë—ã—Å—Ç—Ä–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –±–∞–ª–ª–æ–≤!\n\nüë§ {user_name}\nüí∞ +{points} –±–∞–ª–ª–æ–≤\n\n{result}")
        else:
            await message.answer(f"‚ùå {result}")
            
    except Exception as e:
        logger.error(f"‚ùå Error in quick_add_points_handler: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏ –±–∞–ª–ª–æ–≤")
