import logging
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from app.services.rewards_service import RewardsService
from app.services.points_service import PointsService
from app.services.file_service import FileService

logger = logging.getLogger(__name__)

router = Router()

class RewardStates(StatesGroup):
    waiting_for_reward_title = State()
    waiting_for_reward_description = State()
    waiting_for_reward_cost = State()

@router.message(Command("rewards"))
async def rewards_handler(message: Message):
    """Show available rewards"""
    try:
        user_id = message.from_user.id
        rewards = RewardsService.get_all_rewards()
        
        if not rewards:
            await message.answer("üéÅ –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥.")
            return
        
        rewards_text = "üéÅ –î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã:\n\n"
        
        for reward in rewards:
            reward_id, title, description, cost_points, pdf_file_id = reward
            rewards_text += f"üèÜ {title}\n"
            rewards_text += f"üìù {description}\n"
            rewards_text += f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {cost_points} –±–∞–ª–ª–æ–≤\n"
            
            if pdf_file_id:
                rewards_text += f"üìÑ –§–∞–π–ª: PDF –¥–æ–∫—É–º–µ–Ω—Ç\n"
            
            rewards_text += f"üõí –î–ª—è –ø–æ–∫—É–ø–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /buy_{reward_id}\n"
            rewards_text += "‚îÄ" * 30 + "\n"
        
        user_points = PointsService.get_user_points(user_id)
        rewards_text += f"\nüí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {user_points} –±–∞–ª–ª–æ–≤"
        rewards_text += f"\n\nüìã –í–∞—à–∏ –ø–æ–∫—É–ø–∫–∏: /my_rewards"
        
        await message.answer(rewards_text)
        
    except Exception as e:
        logger.error(f"‚ùå Error in rewards handler: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –Ω–∞–≥—Ä–∞–¥")

@router.message(Command("my_rewards"))
async def my_rewards_handler(message: Message):
    """Show user's purchased rewards"""
    try:
        user_id = message.from_user.id
        user_rewards = RewardsService.get_user_rewards(user_id)
        
        if not user_rewards:
            await message.answer("üì¶ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫—É–ø–ª–µ–Ω–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥.")
            return
        
        rewards_text = "üì¶ –í–∞—à–∏ –∫—É–ø–ª–µ–Ω–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã:\n\n"
        
        for i, reward in enumerate(user_rewards, 1):
            title, description, points_spent, purchased_at = reward
            rewards_text += f"{i}. üèÜ {title}\n"
            if description:
                rewards_text += f"   üìù {description}\n"
            rewards_text += f"   üí∞ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {points_spent} –±–∞–ª–ª–æ–≤\n"
            rewards_text += f"   üìÖ –î–∞—Ç–∞: {purchased_at.strftime('%d.%m.%Y %H:%M')}\n"
            rewards_text += "‚îÄ" * 30 + "\n"
        
        await message.answer(rewards_text)
        
    except Exception as e:
        logger.error(f"‚ùå Error in my_rewards handler: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∞—à–∏—Ö –Ω–∞–≥—Ä–∞–¥")

@router.message(F.text.startswith('/buy_'))
async def buy_reward_handler(message: Message):
    """Handle reward purchase and send PDF"""
    try:
        user_id = message.from_user.id
        command = message.text.split('_')
        
        if len(command) < 2:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /buy_1")
            return
        
        try:
            reward_id = int(command[1])
        except ValueError:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –Ω–∞–≥—Ä–∞–¥—ã.")
            return
        
        # Purchase reward
        success, result, pdf_file_id = await RewardsService.purchase_reward(message.bot, user_id, reward_id)
        
        if success:
            response_text = f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ –Ω–∞–≥—Ä–∞–¥—É: {result}"
            
            if pdf_file_id:
                # Try to send PDF file
                pdf_sent = await FileService.send_pdf_to_user(
                    message.bot,
                    user_id,
                    pdf_file_id,
                    f"üéÅ –í–∞—à–∞ –Ω–∞–≥—Ä–∞–¥–∞: {result}"
                )
                
                if pdf_sent:
                    response_text += f"\nüìÑ –§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è."
                else:
                    response_text += f"\n‚ö†Ô∏è –§–∞–π–ª –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
            else:
                response_text += f"\nüìû –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥—ã —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
            
            user_points = PointsService.get_user_points(user_id)
            response_text += f"\n\nüí∞ –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {user_points} –±–∞–ª–ª–æ–≤"
            
            await message.answer(response_text)
        else:
            await message.answer(f"‚ùå {result}")
            
    except Exception as e:
        logger.error(f"‚ùå Error in buy_reward handler: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –Ω–∞–≥—Ä–∞–¥—ã")

# –ê–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥–∞–º–∏
@router.message(Command("add_reward"))
async def add_reward_start(message: Message, state: FSMContext):
    """Start adding new reward (admin only)"""
    try:
        # TODO: –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –∞–¥–º–∏–Ω–∞
        await message.answer("üèÜ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –Ω–∞–≥—Ä–∞–¥—ã:\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥—ã:")
        await state.set_state(RewardStates.waiting_for_reward_title)
        
    except Exception as e:
        logger.error(f"‚ùå Error in add_reward_start: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@router.message(RewardStates.waiting_for_reward_title)
async def process_reward_title(message: Message, state: FSMContext):
    """Process reward title"""
    try:
        await state.update_data(title=message.text)
        await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥—ã:")
        await state.set_state(RewardStates.waiting_for_reward_description)
        
    except Exception as e:
        logger.error(f"‚ùå Error in process_reward_title: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@router.message(RewardStates.waiting_for_reward_description)
async def process_reward_description(message: Message, state: FSMContext):
    """Process reward description"""
    try:
        await state.update_data(description=message.text)
        await message.answer("üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –Ω–∞–≥—Ä–∞–¥—ã –≤ –±–∞–ª–ª–∞—Ö:")
        await state.set_state(RewardStates.waiting_for_reward_cost)
        
    except Exception as e:
        logger.error(f"‚ùå Error in process_reward_description: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@router.message(RewardStates.waiting_for_reward_cost)
async def process_reward_cost(message: Message, state: FSMContext):
    """Process reward cost and create reward"""
    try:
        try:
            cost_points = int(message.text)
        except ValueError:
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏.")
            return
        
        data = await state.get_data()
        reward_id = RewardsService.create_reward(
            title=data['title'],
            description=data['description'],
            cost_points=cost_points
        )
        
        if reward_id:
            await message.answer(f"‚úÖ –ù–∞–≥—Ä–∞–¥–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞! ID: {reward_id}")
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–∞–≥—Ä–∞–¥—ã.")
        
        await state.clear()
        
    except Exception as e:
        logger.error(f"‚ùå Error in process_reward_cost: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–∞–≥—Ä–∞–¥—ã")
        await state.clear()
