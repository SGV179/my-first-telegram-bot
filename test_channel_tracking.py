import asyncio
import os
from dotenv import load_dotenv
from aiogram import Bot
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode

from database.connections import create_tables, get_db
from database.models import User, ChannelSubscription, UserEvent, UserScore

load_dotenv()

async def test_channel_tracking():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º—É –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤"""
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
    create_tables()
    print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
    db = next(get_db())
    
    users = db.query(User).all()
    subscriptions = db.query(ChannelSubscription).all()
    events = db.query(UserEvent).all()
    scores = db.query(UserScore).all()
    
    print(f"\nüìä –¢–µ–∫—É—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:")
    print(f"   üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}")
    print(f"   üìù –ü–æ–¥–ø–∏—Å–æ–∫: {len(subscriptions)}")
    print(f"   üéØ –°–æ–±—ã—Ç–∏–π: {len(events)}")
    print(f"   ‚≠ê –ó–∞–ø–∏—Å–µ–π –±–∞–ª–ª–æ–≤: {len(scores)}")
    
    if users:
        print(f"\nüìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ:")
        for user in users:
            user_subs = db.query(ChannelSubscription).filter(ChannelSubscription.user_id == user.id).all()
            user_score = db.query(UserScore).filter(UserScore.user_id == user.id).first()
            score = user_score.total_score if user_score else 0
            
            print(f"   üë§ {user.first_name or 'No name'} (@{user.username or 'no_username'})")
            print(f"      ID: {user.telegram_id}, –ë–∞–ª–ª—ã: {score}")
            print(f"      –ü–æ–¥–ø–∏—Å–∫–∏: {len(user_subs)}")
            
            for sub in user_subs:
                status = "‚úÖ –ø–æ–¥–ø–∏—Å–∞–Ω" if sub.is_subscribed else "‚ùå –æ—Ç–ø–∏—Å–∞–Ω"
                print(f"        - –ö–∞–Ω–∞–ª {sub.channel_id}: {status}")

def check_bot_channel_status():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª–∞—Ö"""
    print(f"\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª–∞—Ö:")
    
    # ID –∫–∞–Ω–∞–ª–æ–≤ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    channels = {
        "golden_square": -1002581031645,
        "golden_asset": -1002582539663
    }
    
    print("   –ö–∞–Ω–∞–ª—ã –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:")
    for name, channel_id in channels.items():
        print(f"   ‚Ä¢ {name}: {channel_id}")
    
    print(f"\nüí° –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print(f"   1. –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–∞–Ω–∞–ª @golden_square_1")
    print(f"   2. –ò—Å–∫–ª—é—á–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫–∞–Ω–∞–ª–∞")
    print(f"   3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —Ç–µ—Å—Ç —Å–Ω–æ–≤–∞ —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è")

if __name__ == "__main__":
    print("=== –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤ ===\n")
    asyncio.run(test_channel_tracking())
    check_bot_channel_status()
