from database.connections import get_db
from database.models import User, UserScore
from database.rewards_models import Reward, RewardRedemption
from services.subscription_service import SubscriptionService
import logging

logger = logging.getLogger(__name__)

class RewardsService:
    def __init__(self):
        self.subscription_service = SubscriptionService()
    
    def get_available_rewards(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥"""
        try:
            db = next(get_db())
            rewards = db.query(Reward).filter(Reward.is_active == True).order_by(Reward.cost).all()
            return rewards
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥: {e}")
            return []
    
    def get_user_balance(self, user_id: int) -> int:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            db = next(get_db())
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫–∏
            if not self.subscription_service.check_user_subscriptions(user_id):
                return 0
            
            user = db.query(User).filter(User.telegram_id == user_id).first()
            if not user:
                return 0
            
            user_score = db.query(UserScore).filter(UserScore.user_id == user.id).first()
            return user_score.total_score if user_score else 0
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {e}")
            return 0
    
    def redeem_reward(self, user_id: int, reward_id: int) -> dict:
        """–û–±–º–µ–Ω –±–∞–ª–ª–æ–≤ –Ω–∞ –Ω–∞–≥—Ä–∞–¥—É"""
        try:
            db = next(get_db())
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫–∏
            if not self.subscription_service.check_user_subscriptions(user_id):
                return {"success": False, "message": "‚ùå –î–ª—è –æ–±–º–µ–Ω–∞ –±–∞–ª–ª–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –±—ã—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º –Ω–∞ –±–æ—Ç–∞ –∏ –æ–±–∞ –∫–∞–Ω–∞–ª–∞"}
            
            user = db.query(User).filter(User.telegram_id == user_id).first()
            if not user:
                return {"success": False, "message": "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"}
            
            reward = db.query(Reward).filter(Reward.id == reward_id, Reward.is_active == True).first()
            if not reward:
                return {"success": False, "message": "‚ùå –ù–∞–≥—Ä–∞–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"}
            
            user_score = db.query(UserScore).filter(UserScore.user_id == user.id).first()
            if not user_score or user_score.total_score < reward.cost:
                return {"success": False, "message": f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–ª–æ–≤. –ù—É–∂–Ω–æ: {reward.cost}, —É –≤–∞—Å: {user_score.total_score if user_score else 0}"}
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ–± –æ–±–º–µ–Ω–µ
            redemption = RewardRedemption(
                user_id=user.id,
                reward_id=reward.id,
                status='pending'
            )
            db.add(redemption)
            
            # –°–ø–∏—Å–∞–Ω–∏–µ –±–∞–ª–ª–æ–≤
            user_score.total_score -= reward.cost
            
            db.commit()
            
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ–±–º–µ–Ω—è–ª {reward.cost} –±–∞–ª–ª–æ–≤ –Ω–∞ –Ω–∞–≥—Ä–∞–¥—É '{reward.name}'")
            
            return {
                "success": True, 
                "message": f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–ª—É—á–∏–ª–∏: {reward.name}\n\n–û—Å—Ç–∞–ª–æ—Å—å –±–∞–ª–ª–æ–≤: {user_score.total_score}",
                "reward_name": reward.name,
                "remaining_balance": user_score.total_score
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–º–µ–Ω–∞ –Ω–∞–≥—Ä–∞–¥—ã: {e}")
            return {"success": False, "message": "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–º–µ–Ω–µ –±–∞–ª–ª–æ–≤"}
    
    def get_user_redemptions(self, user_id: int):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –æ–±–º–µ–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            db = next(get_db())
            
            user = db.query(User).filter(User.telegram_id == user_id).first()
            if not user:
                return []
            
            redemptions = db.query(RewardRedemption).filter(
                RewardRedemption.user_id == user.id
            ).order_by(RewardRedemption.redeemed_at.desc()).limit(10).all()
            
            return redemptions
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –æ–±–º–µ–Ω–æ–≤: {e}")
            return []
