from aiogram import Bot, types
from aiogram.filters import ChatMemberUpdatedFilter
from database.connections import get_db
from database.models import User, ChannelSubscription, UserEvent, UserScore
from config.settings import settings
import logging

logger = logging.getLogger(__name__)

async def handle_chat_member_update(update: types.ChatMemberUpdated, bot: Bot):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –æ—Ç–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –∫–∞–Ω–∞–ª–∞—Ö"""
    try:
        logger.info(f"üîî –ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞: {update.model_dump_json()}")
        
        user = update.new_chat_member.user
        chat = update.chat
        
        logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.id} (@{user.username})")
        logger.info(f"üì¢ –ß–∞—Ç: {chat.id} ({chat.title})")
        logger.info(f"üîÑ –°—Ç–∞—Ç—É—Å: {update.old_chat_member.status} -> {update.new_chat_member.status}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–∞—à–∏ —Ü–µ–ª–µ–≤—ã–µ –∫–∞–Ω–∞–ª—ã
        target_channels = list(settings.CHANNELS.values())
        if chat.id not in target_channels:
            logger.info(f"‚ùå –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–∞–Ω–∞–ª {chat.id} - –Ω–µ –≤ —Å–ø–∏—Å–∫–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è")
            return
        
        logger.info(f"‚úÖ –ö–∞–Ω–∞–ª {chat.id} –≤ —Å–ø–∏—Å–∫–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è
        if update.new_chat_member.status == "member":
            event_type = "subscribe"
            is_subscribed = True
            score_change = settings.SCORING["welcome"]
            logger.info(f"üéØ –°–æ–±—ã—Ç–∏–µ: –ü–û–î–ü–ò–°–ö–ê")
        elif update.new_chat_member.status in ["left", "kicked"]:
            event_type = "unsubscribe" 
            is_subscribed = False
            score_change = 0
            logger.info(f"üéØ –°–æ–±—ã—Ç–∏–µ: –û–¢–ü–ò–°–ö–ê")
        else:
            logger.info(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {update.new_chat_member.status}")
            return
        
        db = next(get_db())
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        db_user = db.query(User).filter(User.telegram_id == user.id).first()
        if not db_user:
            db_user = User(
                telegram_id=user.id,
                username=user.username,
                first_name=user.first_name,
                last_name=user.last_name,
                role=settings.ROLES["user"]
            )
            db.add(db_user)
            db.commit()
            db.refresh(db_user)
            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.id}")
        else:
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {db_user.id}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        subscription = db.query(ChannelSubscription).filter(
            ChannelSubscription.user_id == db_user.id,
            ChannelSubscription.channel_id == chat.id
        ).first()
        
        if subscription:
            subscription.is_subscribed = is_subscribed
            logger.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
        else:
            subscription = ChannelSubscription(
                user_id=db_user.id,
                channel_id=chat.id,
                is_subscribed=is_subscribed
            )
            db.add(subscription)
            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ
        event = UserEvent(
            user_id=db_user.id,
            event_type=event_type,
            channel_id=chat.id,
            event_data={
                "chat_title": chat.title,
                "old_status": update.old_chat_member.status,
                "new_status": update.new_chat_member.status
            }
        )
        db.add(event)
        logger.info(f"‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ —Å–æ–±—ã—Ç–∏–µ: {event_type}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–ª—ã –¥–ª—è –ø–æ–¥–ø–∏—Å–æ–∫
        if event_type == "subscribe":
            user_score = db.query(UserScore).filter(UserScore.user_id == db_user.id).first()
            if not user_score:
                user_score = UserScore(user_id=db_user.id, total_score=score_change)
                db.add(user_score)
                logger.info(f"‚≠ê –ù–∞—á–∏—Å–ª–µ–Ω—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ –±–∞–ª–ª—ã: {score_change}")
            else:
                user_score.total_score += score_change
                logger.info(f"‚≠ê –û–±–Ω–æ–≤–ª–µ–Ω—ã –±–∞–ª–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_score.total_score}")
        
        db.commit()
        logger.info(f"üéâ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {user.id} {event_type} –≤ {chat.title}")
        
    except Exception as e:
        logger.error(f"üí• –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        import traceback
        logger.error(traceback.format_exc())
