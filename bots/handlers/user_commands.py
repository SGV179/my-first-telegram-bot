from aiogram import types
from aiogram.filters import Command
from database.connections import get_db
from database.models import User, ChannelSubscription, UserScore
from config.settings import settings
import logging

logger = logging.getLogger(__name__)

async def cmd_stats(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        db = next(get_db())
        user = message.from_user
        
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ
        db_user = db.query(User).filter(User.telegram_id == user.id).first()
        
        if not db_user:
            await message.answer(
                "üìä –í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.\n"
                "–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –æ–¥–∏–Ω –∏–∑ –Ω–∞—à–∏—Ö –∫–∞–Ω–∞–ª–æ–≤ —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!"
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        subscriptions = db.query(ChannelSubscription).filter(
            ChannelSubscription.user_id == db_user.id
        ).all()
        
        # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–ª—ã
        user_score = db.query(UserScore).filter(UserScore.user_id == db_user.id).first()
        total_score = user_score.total_score if user_score else 0
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        response = f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞, {user.first_name}:\n\n"
        response += f"‚≠ê –í—Å–µ–≥–æ –±–∞–ª–ª–æ–≤: {total_score}\n\n"
        response += "üì∫ –í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏:\n"
        
        active_subs = 0
        for sub in subscriptions:
            channel_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–Ω–∞–ª"
            for name, channel_id in settings.CHANNELS.items():
                if channel_id == sub.channel_id:
                    channel_name = name
                    break
            
            status = "‚úÖ –ø–æ–¥–ø–∏—Å–∞–Ω" if sub.is_subscribed else "‚ùå –æ—Ç–ø–∏—Å–∞–Ω"
            response += f"  ‚Ä¢ {channel_name}: {status}\n"
            if sub.is_subscribed:
                active_subs += 1
        
        response += f"\nüéØ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: {active_subs} –∏–∑ {len(settings.CHANNELS)}"
        
        await message.answer(response)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /stats: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

async def cmd_channels(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏"""
    response = "üì∫ –ù–∞—à–∏ –∫–∞–Ω–∞–ª—ã:\n\n"
    
    for name, channel_id in settings.CHANNELS.items():
        channel_username = {
            -1002581031645: "@golden_square_1",
            -1002582539663: "@golden_asset_1"
        }.get(channel_id, f"ID: {channel_id}")
        
        response += f"‚Ä¢ {channel_username}\n"
    
    response += "\n–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª—ã —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –±–∞–ª–ª—ã! üéÅ"
    
    await message.answer(response)
