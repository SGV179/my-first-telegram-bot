from aiogram import types, F
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from services.rewards_service import RewardsService
import logging

logger = logging.getLogger(__name__)

async def cmd_shop(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–∞–≥–∞–∑–∏–Ω –Ω–∞–≥—Ä–∞–¥"""
    try:
        rewards_service = RewardsService()
        rewards = rewards_service.get_available_rewards()
        user_balance = rewards_service.get_user_balance(message.from_user.id)
        
        if not rewards:
            await message.answer("üõçÔ∏è –ú–∞–≥–∞–∑–∏–Ω –Ω–∞–≥—Ä–∞–¥ –ø—É—Å—Ç. –ó–∞–≥–ª—è–Ω–∏—Ç–µ –ø–æ–∑–∂–µ!")
            return
        
        builder = InlineKeyboardBuilder()
        
        message_text = f"üõçÔ∏è –ú–∞–≥–∞–∑–∏–Ω –Ω–∞–≥—Ä–∞–¥\n\nüí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {user_balance} –±–∞–ª–ª–æ–≤\n\n"
        
        for reward in rewards:
            message_text += f"üéÅ <b>{reward.name}</b>\n"
            message_text += f"üìù {reward.description}\n"
            message_text += f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {reward.cost} –±–∞–ª–ª–æ–≤\n\n"
            
            builder.button(
                text=f"üõí {reward.name} - {reward.cost} –±–∞–ª–ª–æ–≤", 
                callback_data=f"buy_reward_{reward.id}"
            )
        
        builder.button(text="üìä –ú–æ–π –±–∞–ª–∞–Ω—Å", callback_data="my_balance")
        builder.button(text="üìã –ò—Å—Ç–æ—Ä–∏—è –æ–±–º–µ–Ω–æ–≤", callback_data="redemption_history")
        builder.adjust(1)  # –ü–æ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ –≤ —Ä—è–¥
        
        await message.answer(message_text, reply_markup=builder.as_markup())
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –æ—Ç–∫—Ä—ã–ª –º–∞–≥–∞–∑–∏–Ω –Ω–∞–≥—Ä–∞–¥")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –º–∞–≥–∞–∑–∏–Ω–∞: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–∞–≥–∞–∑–∏–Ω–∞")

async def cmd_balance(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        rewards_service = RewardsService()
        balance = rewards_service.get_user_balance(message.from_user.id)
        
        if balance == 0:
            await message.answer(
                "üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: 0 –±–∞–ª–ª–æ–≤\n\n"
                "üéØ –ß—Ç–æ–±—ã –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –±–∞–ª–ª—ã:\n"
                "1. –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –±–æ—Ç–∞ –∏ –æ–±–∞ –∫–∞–Ω–∞–ª–∞\n"
                "2. –ë—É–¥—å—Ç–µ –∞–∫—Ç–∏–≤–Ω—ã –≤ –∫–∞–Ω–∞–ª–∞—Ö\n"
                "3. –ü–æ–ª—É—á–∞–π—Ç–µ –±–∞–ª–ª—ã –∑–∞ –ª–∞–π–∫–∏, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏ —Ä–µ–ø–æ—Å—Ç—ã!\n\n"
                "üìã –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /loyalty —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏"
            )
        else:
            await message.answer(f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {balance} –±–∞–ª–ª–æ–≤\n\nüõçÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /shop —á—Ç–æ–±—ã –æ–±–º–µ–Ω—è—Ç—å –±–∞–ª–ª—ã –Ω–∞ –Ω–∞–≥—Ä–∞–¥—ã!")
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –±–∞–ª–∞–Ω—Å")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –±–∞–ª–∞–Ω—Å–∞: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞")

async def handle_rewards_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback-–∑–∞–ø—Ä–æ—Å—ã —Å–∏—Å—Ç–µ–º—ã –Ω–∞–≥—Ä–∞–¥"""
    try:
        data = callback.data
        
        if data == "my_balance":
            await cmd_balance(callback.message)
            
        elif data == "redemption_history":
            await show_redemption_history(callback)
            
        elif data.startswith("buy_reward_"):
            reward_id = int(data.split("_")[2])
            await buy_reward(callback, reward_id)
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback –Ω–∞–≥—Ä–∞–¥: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

async def show_redemption_history(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –æ–±–º–µ–Ω–æ–≤"""
    try:
        rewards_service = RewardsService()
        redemptions = rewards_service.get_user_redemptions(callback.from_user.id)
        
        if not redemptions:
            await callback.message.answer("üìã –£ –≤–∞—Å –µ—â–µ –Ω–µ –±—ã–ª–æ –æ–±–º–µ–Ω–æ–≤ –±–∞–ª–ª–æ–≤ –Ω–∞ –Ω–∞–≥—Ä–∞–¥—ã")
            return
        
        message_text = "üìã –ò—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö –æ–±–º–µ–Ω–æ–≤:\n\n"
        
        for redemption in redemptions:
            status_emoji = "‚è≥" if redemption.status == 'pending' else "‚úÖ"
            message_text += f"{status_emoji} {redemption.reward.name}\n"
            message_text += f"   üí∞ {redemption.reward.cost} –±–∞–ª–ª–æ–≤\n"
            message_text += f"   üìÖ {redemption.redeemed_at.strftime('%d.%m.%Y %H:%M')}\n"
            message_text += f"   üìä –°—Ç–∞—Ç—É—Å: {redemption.status}\n\n"
        
        await callback.message.answer(message_text)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –∏—Å—Ç–æ—Ä–∏–∏ –æ–±–º–µ–Ω–æ–≤: {e}")
        await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏")

async def buy_reward(callback: types.CallbackQuery, reward_id: int):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–∫—É–ø–∫—É –Ω–∞–≥—Ä–∞–¥—ã"""
    try:
        rewards_service = RewardsService()
        result = rewards_service.redeem_reward(callback.from_user.id, reward_id)
        
        if result["success"]:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await callback.message.answer(result["message"])
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–∞–≥–∞–∑–∏–Ω–æ–º
            builder = InlineKeyboardBuilder()
            builder.button(text="üõçÔ∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∫—É–ø–∫–∏", callback_data="back_to_shop")
            builder.button(text="üìä –ú–æ–π –±–∞–ª–∞–Ω—Å", callback_data="my_balance")
            
            await callback.message.edit_reply_markup(reply_markup=builder.as_markup())
        else:
            await callback.message.answer(result["message"])
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ –Ω–∞–≥—Ä–∞–¥—ã: {e}")
        await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –Ω–∞–≥—Ä–∞–¥—ã")
