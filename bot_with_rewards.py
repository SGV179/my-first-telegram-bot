import asyncio
import logging
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command, ChatMemberUpdatedFilter
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode

from database.connections import create_tables
from bots.handlers.channel_handlers_fixed import handle_chat_member_update
from bots.handlers.user_commands import cmd_stats, cmd_channels
from bots.handlers.bot_subscription_handler import handle_bot_subscription
from bots.handlers.loyalty_commands import cmd_loyalty, cmd_rewards
from bots.handlers.rewards_commands import cmd_shop, cmd_balance, handle_rewards_callback
from config.settings import settings

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(
    token=settings.BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
def is_admin(user_id: int) -> bool:
    return user_id in settings.ADMINS

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
dp.chat_member.register(handle_chat_member_update)  # –ü–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª—ã
dp.chat_member.register(handle_bot_subscription)    # –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–∞–º–æ–≥–æ –±–æ—Ç–∞
dp.message.register(cmd_stats, Command("stats"))
dp.message.register(cmd_channels, Command("channels"))
dp.message.register(cmd_loyalty, Command("loyalty"))
dp.message.register(cmd_rewards, Command("rewards"))
dp.message.register(cmd_shop, Command("shop"))
dp.message.register(cmd_balance, Command("balance"))

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º callback-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –Ω–∞–≥—Ä–∞–¥
dp.callback_query.register(handle_rewards_callback, F.data.startswith(("buy_reward_", "my_balance", "redemption_history", "back_to_shop")))

# –ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –∏–∑ bot_admin_fixed.py –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
@dp.message(Command("admin"))
async def cmd_admin(message: types.Message):
    """–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã", callback_data="admin_stats")],
            [types.InlineKeyboardButton(text="üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", callback_data="admin_users")],
            [types.InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–ª–ª–æ–≤", callback_data="admin_scores")],
            [types.InlineKeyboardButton(text="üéÅ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥–∞–º–∏", callback_data="admin_rewards")],
            [types.InlineKeyboardButton(text="üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast")]
        ]
    )
    
    await message.answer(
        "üõ†Ô∏è –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    user = message.from_user
    
    if is_admin(user.id):
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        await message.answer(
            f"üëã –ü—Ä–∏–≤–µ—Ç, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {user.first_name}!\n\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π /admin –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è\n"
            f"/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
            f"/channels - —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤\n"
            f"/loyalty - –ø—Ä–∞–≤–∏–ª–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏\n"
            f"/shop - –º–∞–≥–∞–∑–∏–Ω –Ω–∞–≥—Ä–∞–¥"
        )
    else:
        # –û–±—ã—á–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        await message.answer(
            f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n\n"
            f"–Ø –±–æ—Ç –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤:\n"
            f"‚Ä¢ @golden_square_1\n"
            f"‚Ä¢ @golden_asset_1\n\n"
            f"üìä –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã:\n"
            f"/stats - —Ç–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
            f"/channels - —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤\n"
            f"/loyalty - –ø—Ä–æ–≥—Ä–∞–º–º–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏\n"
            f"/rewards - –¥–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã\n"
            f"/shop - –º–∞–≥–∞–∑–∏–Ω –Ω–∞–≥—Ä–∞–¥\n"
            f"/balance - —Ç–≤–æ–π –±–∞–ª–∞–Ω—Å\n\n"
            f"–Ø –æ—Ç—Å–ª–µ–∂–∏–≤–∞—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –∫–∞–Ω–∞–ª–∞—Ö –∏ –Ω–∞—á–∏—Å–ª—è—é –±–∞–ª–ª—ã! üéÅ"
        )
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
@dp.callback_query(F.data.startswith("admin_"))
async def handle_admin_callback(callback: types.CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    
    action = callback.data
    
    if action == "admin_stats":
        await show_system_stats(callback)
    elif action == "admin_users":
        await show_user_management(callback)
    elif action == "admin_scores":
        await show_score_settings(callback)
    elif action == "admin_rewards":
        await show_rewards_management(callback)
    elif action == "admin_broadcast":
        await show_broadcast_menu(callback)
    elif action == "admin_back":
        await show_admin_main_menu(callback)
    elif action == "admin_user_list":
        await show_user_list(callback)
    elif action == "admin_user_search":
        await show_user_search(callback)
    elif action == "admin_broadcast_create":
        await show_broadcast_create(callback)
    elif action == "admin_rewards_list":
        await show_rewards_list(callback)
    elif action == "admin_rewards_add":
        await show_add_reward(callback)
    
    await callback.answer()

# –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥–∞–º–∏ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
async def show_rewards_management(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥–∞–º–∏"""
    from services.rewards_service import RewardsService
    
    rewards_service = RewardsService()
    rewards_count = len(rewards_service.get_available_rewards())
    
    keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(text="üéÅ –°–ø–∏—Å–æ–∫ –Ω–∞–≥—Ä–∞–¥", callback_data="admin_rewards_list")],
            [types.InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É", callback_data="admin_rewards_add")],
            [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
        ]
    )
    
    await callback.message.edit_text(
        f"üéÅ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥–∞–º–∏\n\n"
        f"üìä –ê–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥: {rewards_count}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard
    )

async def show_rewards_list(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–∞–≥—Ä–∞–¥"""
    from services.rewards_service import RewardsService
    
    rewards_service = RewardsService()
    rewards = rewards_service.get_available_rewards()
    
    if not rewards:
        message = "üéÅ –ù–∞–≥—Ä–∞–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
    else:
        message = "üéÅ –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥:\n\n"
        for i, reward in enumerate(rewards, 1):
            message += f"{i}. <b>{reward.name}</b>\n"
            message += f"   üìù {reward.description}\n"
            message += f"   üí∞ {reward.cost} –±–∞–ª–ª–æ–≤\n"
            message += f"   üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {reward.category}\n\n"
    
    keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_rewards_list")],
            [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_rewards")]
        ]
    )
    
    await callback.message.edit_text(message, reply_markup=keyboard)

async def show_add_reward(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥—ã"""
    keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_rewards")]
        ]
    )
    
    await callback.message.edit_text(
        "‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥—ã\n\n"
        "–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
        "<code>/add_reward –ù–∞–∑–≤–∞–Ω–∏–µ|–û–ø–∏—Å–∞–Ω–∏–µ|–°—Ç–æ–∏–º–æ—Å—Ç—å|–ö–∞—Ç–µ–≥–æ—Ä–∏—è</code>\n\n"
        "–ü—Ä–∏–º–µ—Ä:\n"
        "<code>/add_reward –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –∫–Ω–∏–≥–∞|–ü–æ–ª–µ–∑–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è–º|50|digital</code>\n\n"
        "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏: digital, material, status",
        reply_markup=keyboard
    )

# –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ bot_admin_fixed.py (show_system_stats, show_user_management, –∏ —Ç.–¥.)
# ... [–≤—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞ –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ bot_admin_fixed.py] ...

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main():
    create_tables()
    logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    logger.info(f"üöÄ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è... –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã: {settings.ADMINS}")
    
    # –°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã
    await create_initial_rewards()
    
    await dp.start_polling(bot)

async def create_initial_rewards():
    """–°–æ–∑–¥–∞–µ—Ç –Ω–∞—á–∞–ª—å–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        from database.connections import get_db
        from database.rewards_models import Reward
        
        db = next(get_db())
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –Ω–∞–≥—Ä–∞–¥—ã
        existing_rewards = db.query(Reward).count()
        if existing_rewards > 0:
            logger.info(f"‚úÖ –í –±–∞–∑–µ —É–∂–µ –µ—Å—Ç—å {existing_rewards} –Ω–∞–≥—Ä–∞–¥")
            return
        
        # –°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã
        initial_rewards = [
            {
                "name": "üìö –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –∫–Ω–∏–≥–∞",
                "description": "–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è–º –∏ —Ñ–∏–Ω–∞–Ω—Å–∞–º",
                "cost": 50,
                "category": "digital"
            },
            {
                "name": "üíº –®–∞–±–ª–æ–Ω Excel",
                "description": "–ü–æ–ª–µ–∑–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã –¥–ª—è —É—á–µ—Ç–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤ –∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π",
                "cost": 30,
                "category
