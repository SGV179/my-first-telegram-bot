import os
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor
from sqlalchemy import create_engine, func
from sqlalchemy.orm import sessionmaker

from models import Base, Reward

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
API_TOKEN = '8477241287:AAGXKwYGBmMJ9LIZJwAUXFA_fL89mrSrCKc'

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
engine = create_engine('sqlite:///bot_database.db')
Base.metadata.bind = engine
DBSession = sessionmaker(bind=engine)
db_session = DBSession()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
Base.metadata.create_all(engine)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class AdminStates(StatesGroup):
    waiting_for_reward_file = State()
    waiting_for_reward_title = State()
    waiting_for_reward_points = State()
    waiting_for_reward_edit = State()
    waiting_for_reward_edit_points = State()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_main_keyboard():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton('–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å'))
    keyboard.add(KeyboardButton('–ö–∞—Ç–∞–ª–æ–≥ –Ω–∞–≥—Ä–∞–¥'))
    keyboard.add(KeyboardButton('–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å'))
    return keyboard

def get_admin_keyboard():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É'))
    keyboard.add(KeyboardButton('–°–ø–∏—Å–æ–∫ –Ω–∞–≥—Ä–∞–¥'))
    keyboard.add(KeyboardButton('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥–∞–º–∏'))
    keyboard.add(KeyboardButton('–ù–∞ –≥–ª–∞–≤–Ω—É—é'))
    return keyboard

def get_rewards_keyboard():
    keyboard = InlineKeyboardMarkup()
    rewards = db_session.query(Reward).all()
    
    # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞–≥—Ä–∞–¥—ã —Å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏
    available_rewards = [r for r in rewards if r.file_id]
    
    for reward in available_rewards:
        button_text = f"{reward.title} - {reward.points_cost} –±–∞–ª–ª–æ–≤"
        if len(button_text) > 50:
            button_text = reward.title[:47] + "..."
        
        keyboard.add(InlineKeyboardButton(
            button_text,
            callback_data=f"reward_{reward.id}"
        ))
    return keyboard

def get_manage_rewards_keyboard():
    keyboard = InlineKeyboardMarkup()
    rewards = db_session.query(Reward).all()
    
    for reward in rewards:
        button_text = f"{reward.title}"
        if len(button_text) > 30:
            button_text = reward.title[:27] + "..."
        
        keyboard.row(
            InlineKeyboardButton(
                button_text,
                callback_data=f"view_reward_{reward.id}"
            ),
            InlineKeyboardButton(
                "‚úèÔ∏è",
                callback_data=f"edit_reward_{reward.id}"
            ),
            InlineKeyboardButton(
                "‚ùå", 
                callback_data=f"delete_reward_{reward.id}"
            )
        )
    
    keyboard.add(InlineKeyboardButton("–ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É", callback_data="back_to_admin"))
    return keyboard

# –û—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –æ—Ç –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
def cleanup_duplicates():
    """–£–¥–∞–ª—è–µ—Ç –¥—É–±–ª–∏–∫–∞—Ç—ã –Ω–∞–≥—Ä–∞–¥ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω—é—é –≤–µ—Ä—Å–∏—é"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–∞–≥—Ä–∞–¥—ã
        all_rewards = db_session.query(Reward).all()
        
        # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π
        unique_titles = {}
        duplicates_to_delete = []
        
        for reward in all_rewards:
            if reward.title in unique_titles:
                # –ï—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —É–∂–µ –≤—Å—Ç—Ä–µ—á–∞–ª–æ—Å—å, –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ
                duplicates_to_delete.append(reward.id)
            else:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å —ç—Ç–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º
                unique_titles[reward.title] = reward.id
        
        # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        if duplicates_to_delete:
            for reward_id in duplicates_to_delete:
                reward_to_delete = db_session.query(Reward).filter(Reward.id == reward_id).first()
                if reward_to_delete:
                    db_session.delete(reward_to_delete)
            
            db_session.commit()
            logging.info(f"Removed {len(duplicates_to_delete)} duplicate rewards")
        else:
            logging.info("No duplicates found")
            
    except Exception as e:
        logging.error(f"Error during cleanup: {e}")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞—á–∞–ª—å–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥
def initialize_rewards():
    # –°–Ω–∞—á–∞–ª–∞ —á–∏—Å—Ç–∏–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    cleanup_duplicates()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –Ω–∞–≥—Ä–∞–¥—ã –≤ –±–∞–∑–µ
    existing_rewards = db_session.query(Reward).count()
    if existing_rewards == 0:
        initial_rewards = [
            {
                "title": "–ì–∞–π–¥. –ö–∞–∫ –≤—ã–±—Ä–∞—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤–∫—É –∫–≤–∞—Ä—Ç–∏—Ä—ã?",
                "points_cost": 50
            },
            {
                "title": "–¢–û–ü 10 —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π –∫–≤–∞—Ä—Ç–∏—Ä –≤ –ø—Ä–µ–º–∏—É–º-–∫–ª–∞—Å—Å–µ –≤ 2025 –≥–æ–¥—É",
                "points_cost": 30
            },
            {
                "title": "–¢–û–ü 10 —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π –∫–≤–∞—Ä—Ç–∏—Ä –≤ –∫–æ–º—Ñ–æ—Ä—Ç-–∫–ª–∞—Å—Å–µ –≤ 2025 –≥–æ–¥—É", 
                "points_cost": 30
            },
            {
                "title": "–ß–µ–∫-–ª–∏—Å—Ç. –ö–∞–∫ –≤—ã–±—Ä–∞—Ç—å 1-–∫–æ–º–Ω–∞—Ç–Ω—É—é –∫–≤–∞—Ä—Ç–∏—Ä—É –¥–ª—è –∂–∏–∑–Ω–∏?",
                "points_cost": 30
            },
            {
                "title": "–ß–µ–∫-–ª–∏—Å—Ç. –ö–∞–∫ –≤—ã–±—Ä–∞—Ç—å 1-–∫–æ–º–Ω–∞—Ç–Ω—É—é –∫–≤–∞—Ä—Ç–∏—Ä—É –¥–ª—è –∞—Ä–µ–Ω–¥—ã?",
                "points_cost": 30
            },
            {
                "title": "–ß–µ–∫-–ª–∏—Å—Ç. –ö–∞–∫ –≤—ã–±—Ä–∞—Ç—å 2-–∫–æ–º–Ω–∞—Ç–Ω—É—é –∫–≤–∞—Ä—Ç–∏—Ä—É –¥–ª—è –∂–∏–∑–Ω–∏?",
                "points_cost": 30
            },
            {
                "title": "–ß–µ–∫-–ª–∏—Å—Ç. –ö–∞–∫ –≤—ã–±—Ä–∞—Ç—å 2-–∫–æ–º–Ω–∞—Ç–Ω—É—é –∫–≤–∞—Ä—Ç–∏—Ä—É –¥–ª—è –∞—Ä–µ–Ω–¥—ã?",
                "points_cost": 30
            }
        ]
        
        for reward_data in initial_rewards:
            existing = db_session.query(Reward).filter_by(title=reward_data["title"]).first()
            if not existing:
                reward = Reward(
                    title=reward_data["title"],
                    points_cost=reward_data["points_cost"]
                )
                db_session.add(reward)
        
        db_session.commit()
        logging.info("Initial rewards checked/added to database")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç!\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –ø–æ–ª–µ–∑–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∑–∞ –±–∞–ª–ª—ã.",
        reply_markup=get_main_keyboard()
    )

@dp.message_handler(lambda message: message.text == '–ù–∞ –≥–ª–∞–≤–Ω—É—é')
async def cmd_main_menu(message: types.Message):
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_keyboard())

@dp.message_handler(lambda message: message.text == '–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å')
async def cmd_profile(message: types.Message):
    await message.answer(
        "–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n"
        "–ë–∞–ª–ª—ã: 100\n\n"
        "–ó–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤–∞—à–µ —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤."
    )

@dp.message_handler(lambda message: message.text == '–ö–∞—Ç–∞–ª–æ–≥ –Ω–∞–≥—Ä–∞–¥')
async def cmd_rewards_catalog(message: types.Message):
    rewards = db_session.query(Reward).all()
    available_rewards = [r for r in rewards if r.file_id]
    
    if not available_rewards:
        await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥. –§–∞–π–ª—ã –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")
        return
    
    text = "üèÜ –ö–∞—Ç–∞–ª–æ–≥ –Ω–∞–≥—Ä–∞–¥:\n\n"
    for reward in available_rewards:
        text += f"‚Ä¢ {reward.title} - {reward.points_cost} –±–∞–ª–ª–æ–≤\n"
    
    text += "\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–≥—Ä–∞–¥—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è:"
    await message.answer(text, reply_markup=get_rewards_keyboard())

@dp.message_handler(lambda message: message.text == '–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å')
async def cmd_admin_panel(message: types.Message):
    await message.answer(
        "üë®‚Äçüíª –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_admin_keyboard()
    )

@dp.message_handler(lambda message: message.text == '–î–æ–±–∞–≤–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É')
async def cmd_add_reward(message: types.Message):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ PDF —Ñ–∞–π–ª –¥–ª—è –Ω–æ–≤–æ–π –Ω–∞–≥—Ä–∞–¥—ã:")
    await AdminStates.waiting_for_reward_file.set()

@dp.message_handler(lambda message: message.text == '–°–ø–∏—Å–æ–∫ –Ω–∞–≥—Ä–∞–¥')
async def cmd_rewards_list(message: types.Message):
    rewards = db_session.query(Reward).all()
    if not rewards:
        await message.answer("–ù–∞–≥—Ä–∞–¥—ã –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã.")
        return
    
    text = "üìã –°–ø–∏—Å–æ–∫ –Ω–∞–≥—Ä–∞–¥:\n\n"
    for reward in rewards:
        status = "‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω" if reward.file_id else "‚ùå –§–∞–π–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
        text += f"‚Ä¢ {reward.title}\n  –¶–µ–Ω–∞: {reward.points_cost} –±–∞–ª–ª–æ–≤\n  –°—Ç–∞—Ç—É—Å: {status}\n\n"
    
    await message.answer(text)

@dp.message_handler(lambda message: message.text == '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥–∞–º–∏')
async def cmd_manage_rewards(message: types.Message):
    await message.answer(
        "üõ† –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥–∞–º–∏:\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–≥—Ä–∞–¥—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
        reply_markup=get_manage_rewards_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ callback'–æ–≤ –¥–ª—è –Ω–∞–≥—Ä–∞–¥
@dp.callback_query_handler(lambda c: c.data and c.data.startswith('reward_'))
async def process_reward_callback(callback_query: types.CallbackQuery):
    reward_id = int(callback_query.data.split('_')[1])
    reward = db_session.query(Reward).filter(Reward.id == reward_id).first()
    
    if not reward:
        await callback_query.answer("–ù–∞–≥—Ä–∞–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    if not reward.file_id:
        await callback_query.answer("–§–∞–π–ª –¥–ª—è —ç—Ç–æ–π –Ω–∞–≥—Ä–∞–¥—ã –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω")
        return
    
    try:
        await bot.send_document(
            callback_query.from_user.id,
            reward.file_id,
            caption=f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–ª—É—á–∏–ª–∏: {reward.title}"
        )
        await callback_query.answer("–ù–∞–≥—Ä–∞–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")
    except Exception as e:
        await callback_query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞")
        logging.error(f"Error sending file: {e}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥–∞–º–∏
@dp.callback_query_handler(lambda c: c.data and c.data.startswith('view_reward_'))
async def process_view_reward(callback_query: types.CallbackQuery):
    reward_id = int(callback_query.data.split('_')[2])
    reward = db_session.query(Reward).filter(Reward.id == reward_id).first()
    
    if reward:
        status = "‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω" if reward.file_id else "‚ùå –§–∞–π–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
        text = f"üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞–≥—Ä–∞–¥–µ:\n\n–ù–∞–∑–≤–∞–Ω–∏–µ: {reward.title}\n–¶–µ–Ω–∞: {reward.points_cost} –±–∞–ª–ª–æ–≤\n–°—Ç–∞—Ç—É—Å: {status}"
        await callback_query.message.answer(text)
    await callback_query.answer()

@dp.callback_query_handler(lambda c: c.data and c.data.startswith('edit_reward_'))
async def process_edit_reward(callback_query: types.CallbackQuery):
    reward_id = int(callback_query.data.split('_')[2])
    reward = db_session.query(Reward).filter(Reward.id == reward_id).first()
    
    if reward:
        await callback_query.message.answer(
            f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥—ã: {reward.title}\n\n"
            f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {reward.points_cost} –±–∞–ª–ª–æ–≤\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É –≤ –±–∞–ª–ª–∞—Ö:"
        )
        await AdminStates.waiting_for_reward_edit_points.set()
        await dp.current_state().update_data(reward_id=reward_id)
    await callback_query.answer()

@dp.callback_query_handler(lambda c: c.data and c.data.startswith('delete_reward_'))
async def process_delete_reward(callback_query: types.CallbackQuery):
    reward_id = int(callback_query.data.split('_')[2])
    reward = db_session.query(Reward).filter(Reward.id == reward_id).first()
    
    if reward:
        db_session.delete(reward)
        db_session.commit()
        await callback_query.message.answer(f"–ù–∞–≥—Ä–∞–¥–∞ '{reward.title}' —É–¥–∞–ª–µ–Ω–∞!")
    else:
        await callback_query.message.answer("–ù–∞–≥—Ä–∞–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    await callback_query.answer()

@dp.callback_query_handler(lambda c: c.data == 'back_to_admin')
async def process_back_to_admin(callback_query: types.CallbackQuery):
    await callback_query.message.answer("–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å:", reply_markup=get_admin_keyboard())
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –Ω–∞–≥—Ä–∞–¥
@dp.message_handler(state=AdminStates.waiting_for_reward_file, content_types=types.ContentType.DOCUMENT)
async def process_reward_file(message: types.Message, state: FSMContext):
    if not message.document.mime_type == 'application/pdf':
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF.")
        return
    
    async with state.proxy() as data:
        data['file_id'] = message.document.file_id
        data['file_name'] = message.document.file_name
    
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥—ã:")
    await AdminStates.waiting_for_reward_title.set()

@dp.message_handler(state=AdminStates.waiting_for_reward_title)
async def process_reward_title(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['title'] = message.text
    
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –Ω–∞–≥—Ä–∞–¥—ã –≤ –±–∞–ª–ª–∞—Ö:")
    await AdminStates.waiting_for_reward_points.set()

@dp.message_handler(state=AdminStates.waiting_for_reward_points)
async def process_reward_points(message: types.Message, state: FSMContext):
    try:
        points = int(message.text)
        if points <= 0:
            await message.answer("–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    async with state.proxy() as data:
        reward = Reward(
            title=data['title'],
            file_id=data['file_id'],
            file_name=data['file_name'],
            points_cost=points
        )
        
        db_session.add(reward)
        db_session.commit()
    
    await message.answer(f"–ù–∞–≥—Ä–∞–¥–∞ '{data['title']}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞ {points} –±–∞–ª–ª–æ–≤!")
    await state.finish()

@dp.message_handler(state=AdminStates.waiting_for_reward_edit_points)
async def process_edit_reward_points(message: types.Message, state: FSMContext):
    try:
        points = int(message.text)
        if points <= 0:
            await message.answer("–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    async with state.proxy() as data:
        reward_id = data['reward_id']
        reward = db_session.query(Reward).filter(Reward.id == reward_id).first()
        
        if reward:
            old_points = reward.points_cost
            reward.points_cost = points
            db_session.commit()
            await message.answer(f"–¶–µ–Ω–∞ –Ω–∞–≥—Ä–∞–¥—ã '{reward.title}' –∏–∑–º–µ–Ω–µ–Ω–∞ —Å {old_points} –Ω–∞ {points} –±–∞–ª–ª–æ–≤!")
        else:
            await message.answer("–ù–∞–≥—Ä–∞–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    await state.finish()

if __name__ == '__main__':
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã
    initialize_rewards()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logging.info("Bot starting...")
    executor.start_polling(dp, skip_updates=True)

