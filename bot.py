import asyncio
import os
from dotenv import load_dotenv  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É –¥–ª—è —á—Ç–µ–Ω–∏—è .env
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command

#!/usr/bin/env python3
"""
–ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª Telegram –±–æ—Ç–∞ —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
"""

import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from config.database import init_database
from services.bot_service import BotService

# üîê –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
BOT_TOKEN = "8477241287:AAGXKwYGBmMJ9LIZJwAUXFA_fL89mrSrCKc"  # ‚¨ÖÔ∏è –ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –†–ï–ê–õ–¨–ù–´–ô –¢–û–ö–ï–ù

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
init_database()

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    bot_service = BotService()
    
    try:
        user = update.effective_user
        chat = update.effective_chat
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        db_user = bot_service.register_user(
            telegram_id=user.id,
            username=user.username,
            first_name=user.first_name,
            last_name=user.last_name
        )
        
        # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ —Å—Ç–∞—Ä—Ç–∞
        bot_service.track_user_event(
            user_id=db_user.id,
            event_type="start_command"
        )
        
        welcome_text = f"""
üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!

‚úÖ –¢—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ!
üìä –¢–≤–æ–π ID –≤ –±–∞–∑–µ: {db_user.id}

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/profile - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        """
        
        await update.message.reply_text(welcome_text)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ start_command: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    finally:
        bot_service.close_connection()

async def profile_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /profile"""
    bot_service = BotService()
    
    try:
        user = update.effective_user
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã
        db_user = bot_service.register_user(
            telegram_id=user.id,
            username=user.username,
            first_name=user.first_name,
            last_name=user.last_name
        )
        
        # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ—Ñ–∏–ª—è
        bot_service.track_user_event(
            user_id=db_user.id,
            event_type="view_profile"
        )
        
        profile_text = f"""
üìä –¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å:

üë§ –ò–º—è: {user.first_name} {user.last_name or ''}
üîó Username: @{user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}
üÜî Telegram ID: {user.id}
üìà ID –≤ –±–∞–∑–µ: {db_user.id}
        """
        
        await update.message.reply_text(profile_text)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ profile_command: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è.")
    
    finally:
        bot_service.close_connection()

async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats"""
    bot_service = BotService()
    
    try:
        user = update.effective_user
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã
        db_user = bot_service.register_user(
            telegram_id=user.id,
            username=user.username,
            first_name=user.first_name,
            last_name=user.last_name
        )
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (–∑–∞–≥–ª—É—à–∫–∞ - –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å)
        stats = bot_service.get_user_stats(db_user.id)
        
        # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        bot_service.track_user_event(
            user_id=db_user.id,
            event_type="view_stats"
        )
        
        stats_text = f"""
üìà –¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {db_user.id}
üìä –°–æ–±—ã—Ç–∏–π –∑–∞–ø–∏—Å–∞–Ω–æ: {stats['events_count']}
üîÑ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ‚úÖ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞
        """
        
        await update.message.reply_text(stats_text)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ stats_command: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
    
    finally:
        bot_service.close_connection()

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    bot_service = BotService()
    
    try:
        user = update.effective_user
        message_text = update.message.text
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã
        db_user = bot_service.register_user(
            telegram_id=user.id,
            username=user.username,
            first_name=user.first_name,
            last_name=user.last_name
        )
        
        # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        bot_service.track_user_event(
            user_id=db_user.id,
            event_type="user_message",
            event_data={"text_length": len(message_text)}
        )
        
        response_text = f"""
üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ –∏ –∑–∞–ø–∏—Å–∞–Ω–æ –≤ –±–∞–∑—É!

üìù –î–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {len(message_text)} —Å–∏–º–≤–æ–ª–æ–≤
üÜî –í–∞—à ID: {db_user.id}
        """
        
        await update.message.reply_text(response_text)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_message: {e}")
    
    finally:
        bot_service.close_connection()

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"–û—à–∏–±–∫–∞: {context.error}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    print("ü§ñ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("profile", profile_command))
    application.add_handler(CommandHandler("stats", stats_command))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    application.add_error_handler(error_handler)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è...")
    application.run_polling()

if __name__ == "__main__":
    main()

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞ .env
load_dotenv()

# –¢–µ–ø–µ—Ä—å —Ç–æ–∫–µ–Ω –±–µ–∑–æ–ø–∞—Å–Ω–æ –±–µ—Ä–µ—Ç—Å—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ–∫–µ–Ω –∑–∞–≥—Ä—É–∑–∏–ª—Å—è
if not BOT_TOKEN:
    print("–û—à–∏–±–∫–∞: –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env")
    exit(1)

# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ø–µ—Ä–≤—ã–π –±–æ—Ç, –Ω–∞–ø–∏—Å–∞–Ω–Ω—ã–π –Ω–∞ aiogram! üëã")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–±—É–¥–µ—Ç —ç—Ö–æ–º –ø–æ–≤—Ç–æ—Ä—è—Ç—å —Ç–µ–∫—Å—Ç)
@dp.message()
async def echo_message(message: types.Message):
    await message.answer(message.text)

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main():
    print("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    await dp.start_polling(bot)

# –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã
if __name__ == "__main__":
    asyncio.run(main())
